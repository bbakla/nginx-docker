

server {
    listen 80;
    #server_name ~^(www\.)?(?<domain>.+)$;
    #mercedes-rule-engine.alarm.horizondev.cloud
    server_name ~^(.*).alarm.horizondev.cloud$
    port_in_redirect off;


    #resolver 127.0.0.11; #I am very skeptical about it. https://stackoverflow.com/questions/35744650/docker-network-nginx-resolver
    resolver 127.0.0.11 [::1]:5353 valid=30s;
    #resolver local=on ipv6=off; # can be useful on aws environment

    #set $rule_engine http://rule_engine_upstream; # No trailing slash. Otherwise, subpaths dont work.
    recursive_error_pages  on;

    location / {
        #set $rule_engine_address http://$host:8099$request_uri;
        set $rule_engine_address http://$1.local-multi:8099$request_uri;

        auth_request /authorize;
        auth_request_set $auth_status $upstream_status;
        auth_request_set $http_notfound_status $upstream_http_notfound;

        error_page  500 502 503 505 /50x.html;
        error_page 404 /404.html;
        error_page 401  /index.html;

        add_header Xdebugsubdomain "$1";
        add_header Xdebugstatus "$auth_status";
        add_header Xdebugheader "$upstream_http_notfound";


        proxy_pass $rule_engine_address;
        #proxy_pass http://$host:8099$request_uri;
        #proxy_pass http://$domain:8099$request_uri;

        #proxy_pass $rule_engine;

        proxy_redirect   off; # proxy redirect off makes a big difference

        proxy_set_header Host            $host;
        proxy_set_header Http_Host       $http_host;
        proxy_set_header proxy_host      $proxy_host;
        proxy_set_header X-Forwarded-For $remote_addr;
        proxy_set_header X-Original-URI  $request_uri;
        proxy_set_header X-Upstream  $upstream_addr;

        proxy_pass_header on;
    }

    location = /authorize {
        internal;
        proxy_pass http://authorizer:8090;

        proxy_intercept_errors on;
        proxy_pass_request_body off;
        proxy_set_header        Content-Length "";
        proxy_set_header        X-Original-URI $request_uri;
        #proxy_set_header X-Original-URI $request_uri;

    }

    location  /404.html {
        # internal;

        root /usr/share/nginx/html;
        allow all;
    }

    location /index.html {
        return 401 /usr/share/nginx/index.html;
        internal;
        root /usr/share/nginx/html;
    }

    location = /50x.html {

        if ($auth_status = '404') {
            return 404;
        }
        add_header Xdebugstatus1 "$auth_status" always;
        add_header Xdebugheader1 "$upstream_http_notfound" always;
        add_header Xdebugheader2 "$sent_http_notfound" always;
        add_header Xdebugheader3 "$http_notfound" always;
        add_header Xdebugupstreamstatus_1 "$upstream_status" always;

        root /usr/share/nginx/html;
        internal;

        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
        proxy_set_header X-Original-URI $request_uri;
    }
}
